train:
  get_spectrogram: # special key for getting spectrogram
    _target_: torchaudio.transforms.MelSpectrogram
    sample_rate: 16000
  audio: # name of the tensor on which we apply transform
    _target_: torchvision.transforms.v2.Compose
    transforms:
      - _target_: src.transforms.wav_augs.Gain
        p: 0.5
      - _target_: src.transforms.wav_augs.ColoredNoise
        p: 0.5  
        sample_rate: ${datasets.train.target_sr}
      - _target_: torchvision.transforms.v2.RandomChoice
        p: 0.5
        transforms:
          - _target_: src.transforms.wav_augs.LowPassFilter
            p: 1.0
            min_cutoff_freq: 500
            max_cutoff_freq: 1500
            sample_rate: ${datasets.train.target_sr}
          - _target_: src.transforms.wav_augs.HighPassFilter
            p: 1.0
            min_cutoff_freq: 500
            max_cutoff_freq: 1500
            sample_rate: ${datasets.train.target_sr}
          - _target_: src.transforms.wav_augs.BandPassFilter
            p: 1.0
            min_bandwidth_fraction: 1.5
            min_center_frequency: 1000
            max_center_frequency: 2000
            sample_rate: ${datasets.train.target_sr}
inference:
  get_spectrogram:
    _target_: torchaudio.transforms.MelSpectrogram
    sample_rate: 16000
